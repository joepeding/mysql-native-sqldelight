name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      # Only 1 parallel job with fail-fast, so if Ubuntu fails the more expensive macOS job is skipped.
      max-parallel: 1
      fail-fast: true
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]

    steps:
      - uses: actions/checkout@v4

      - name: Start pre-installed MySQL
        if: runner.os == 'Linux'
        run: |
          sudo systemctl start mysql.service
          mysqladmin -u root -proot password ''

      - name: Set up buildx
        if: runner.os == 'Linux'
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Cache Docker layers
        if: runner.os == 'Linux'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Compile Kotlin/Native-compatible libcrypto, libssl & libmysqlclient in Docker container
        if: runner.os == 'Linux'
        id: container
        uses: docker/build-push-action@v3
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: docker-build-openssl/Dockerfile
          push: false
          load: true
          tags: buildcontainer
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        if: runner.os == 'Linux'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Copy mysql.h, libmysqlclient.a, libssl.a, libcrypto.a from container
        if: runner.os == 'Linux'
        run: |
          id=$(docker create buildcontainer)
          docker cp $id:/usr/local/mysql/include ./docker-build-openssl
          docker cp $id:/usr/local/mysql/lib/libmysqlclient.a ./docker-build-openssl
          docker cp $id:/usr/local/openssl/lib64/libcrypto.a ./docker-build-openssl
          docker cp $id:/usr/local/openssl/lib64/libssl.a ./docker-build-openssl
          docker rm -v $id

      - name: Set up Homebrew
        if: runner.os != 'Linux'
        uses: Homebrew/actions/setup-homebrew@master
        id: set-up-homebrew

      - name: Install MySQL 8.1, OpenSSL 3.1 and start MySQL
        run: |
          brew install mysql@8.1
          brew install openssl@3.1
          mysql.server start
        if: runner.os != 'Linux'

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17

      - name: Set up gradle build
        uses: gradle/gradle-build-action@v2
        with:
          dependency-graph: generate-and-submit
          gradle-home-cache-cleanup: true

      - name: Create database for test use
        run: mysql -uroot -e 'CREATE DATABASE onsdb;'

      - name: Run tests
        run: ./gradlew allTests

      - name: Generate documentation
        run: ./gradlew dokkaHtmlMultiModule

      - name: Publish documentation
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.DOCUMENTATION_FTP_ADDRESS }}
          username: ${{ secrets.DOCUMENTATION_FTP_USERNAME }}
          password: ${{ secrets.DOCUMENTATION_FTP_PASSWORD }}
          local-dir: './build/dokka/htmlMultiModule/'
